{"version":3,"file":"mergediscussion.min.js","sources":["../src/mergediscussion.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Merge discussion for mod_forumng.\n *\n * @module mod_forumng/mergediscussion\n * @copyright 2024 The Open University\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport MergeModal from 'mod_forumng/mergemodal';\nimport * as FocusLockManager from 'core/local/aria/focuslock';\nimport ModalEvents from 'core/modal_events';\n\nexport class MergeDiscussion {\n\n    constructor(options) {\n        this.discussionid = options.discussionid;\n    }\n\n    /**\n     * Disables the table row with the specified discussion ID.\n     *\n     * @param {string} discussionId - The ID of the discussion to disable.\n     */\n    disableRow(discussionId) {\n        const row = document.getElementById(`discrow_${discussionId}`);\n        if (row) {\n            // Disable the row by adding a \"disabled\" class or setting attributes.\n            row.classList.add('disabled');\n            row.style.pointerEvents = 'none';\n            row.style.opacity = '0.5';\n\n            // Prevent tabbing into child elements.\n            const childElements = row.querySelectorAll('*');\n            childElements.forEach(child => {\n                child.setAttribute('tabindex', '-1');\n            });\n        }\n    }\n\n    /**\n     * Disable other discussion options when in the merging process, only displaying the 'merge here' option.\n     */\n    disableInputs() {\n        // Query all divs with class starting with \"forumngfeature_dis_\" but excluding \"forumngfeature_dis_merge\".\n        const divs = document.querySelectorAll('div[class^=\"forumngfeature_dis_\"]:not(.forumngfeature_dis_merge)');\n\n        divs.forEach(div => {\n            const inputs = div.querySelectorAll('input, select');\n            // Disable each input element.\n            inputs.forEach(input => {\n                input.disabled = true;\n            });\n        });\n    }\n\n    /**\n     * Initial function.\n     */\n    initializer() {\n        this.disableRow(this.discussionid);\n        this.disableInputs();\n    }\n\n}\n\nexport const init = (options) => {\n    showMergeDialogue();\n    if (options && options.discussionid !== 0) {\n        const merge = new MergeDiscussion(options);\n        merge.initializer();\n    }\n};\n\n/**\n * Displays a merging instruction dialogue.\n */\nconst showMergeDialogue = async() => {\n    const mergeform = document.querySelector('.forumngfeature_dis_merge form.merge-form');\n    // Don't show the dialog in case the user preferences is set.\n    if (mergeform && mergeform.getAttribute('action').trim() !== '') {\n        return;\n    }\n\n    const mergeButton = mergeform.querySelector('input[type=\"submit\"]');\n\n    if (!mergeButton) {\n        return;\n    }\n\n    mergeButton.addEventListener('click', async(e) => {\n        e.preventDefault();\n        mergeButton.blur();\n        const modal = await MergeModal.create({});\n        const $root = await modal.getRoot();\n        const root = $root[0];\n        const currentForm = root.querySelector('form');\n\n        const urlParams = new URLSearchParams(window.location.search);\n        const discussionId = urlParams.get('d');\n\n        modal.show();\n\n        // Lock tab control inside modal.\n        FocusLockManager.trapFocus(document.querySelector('.merging-modal'));\n        $root.on(ModalEvents.hidden, () => {\n            modal.destroy();\n            FocusLockManager.untrapFocus();\n        });\n\n        $root.on(ModalEvents.save, () => {\n            if (discussionId) {\n                currentForm.action = `feature/merge/merge.php?d=${discussionId}`;\n            }\n            currentForm.submit();\n        });\n    });\n};\n"],"names":["MergeDiscussion","constructor","options","discussionid","disableRow","discussionId","row","document","getElementById","classList","add","style","pointerEvents","opacity","querySelectorAll","forEach","child","setAttribute","disableInputs","div","input","disabled","initializer","this","showMergeDialogue","async","mergeform","querySelector","getAttribute","trim","mergeButton","addEventListener","e","preventDefault","blur","modal","MergeModal","create","$root","getRoot","currentForm","URLSearchParams","window","location","search","get","show","FocusLockManager","trapFocus","on","ModalEvents","hidden","destroy","untrapFocus","save","action","submit"],"mappings":";;;;;;;q4BA2BaA,gBAETC,YAAYC,cACHC,aAAeD,QAAQC,aAQhCC,WAAWC,oBACDC,IAAMC,SAASC,iCAA0BH,kBAC3CC,IAAK,CAELA,IAAIG,UAAUC,IAAI,YAClBJ,IAAIK,MAAMC,cAAgB,OAC1BN,IAAIK,MAAME,QAAU,MAGEP,IAAIQ,iBAAiB,KAC7BC,SAAQC,QAClBA,MAAMC,aAAa,WAAY,UAQ3CC,gBAEiBX,SAASO,iBAAiB,oEAElCC,SAAQI,MACMA,IAAIL,iBAAiB,iBAE7BC,SAAQK,QACXA,MAAMC,UAAW,QAQ7BC,mBACSlB,WAAWmB,KAAKpB,mBAChBe,wEAKQhB,aACjBsB,oBACItB,SAAoC,IAAzBA,QAAQC,aAAoB,CACzB,IAAIH,gBAAgBE,SAC5BoB,sBAORE,kBAAoBC,gBAChBC,UAAYnB,SAASoB,cAAc,gDAErCD,WAAyD,KAA5CA,UAAUE,aAAa,UAAUC,oBAI5CC,YAAcJ,UAAUC,cAAc,wBAEvCG,aAILA,YAAYC,iBAAiB,SAASN,MAAAA,IAClCO,EAAEC,iBACFH,YAAYI,aACNC,YAAcC,oBAAWC,OAAO,IAChCC,YAAcH,MAAMI,UAEpBC,YADOF,MAAM,GACMX,cAAc,QAGjCtB,aADY,IAAIoC,gBAAgBC,OAAOC,SAASC,QACvBC,IAAI,KAEnCV,MAAMW,OAGNC,iBAAiBC,UAAUzC,SAASoB,cAAc,mBAClDW,MAAMW,GAAGC,sBAAYC,QAAQ,KACzBhB,MAAMiB,UACNL,iBAAiBM,iBAGrBf,MAAMW,GAAGC,sBAAYI,MAAM,KACnBjD,eACAmC,YAAYe,2CAAsClD,eAEtDmC,YAAYgB"}